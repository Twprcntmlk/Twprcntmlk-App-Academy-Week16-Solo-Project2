{"ast":null,"code":"/**\n * @module ol/tilegrid\n */\nimport Corner from './extent/Corner.js';\nimport TileGrid from './tilegrid/TileGrid.js';\nimport Units from './proj/Units.js';\nimport { DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { METERS_PER_UNIT, get as getProjection } from './proj.js';\nimport { containsCoordinate, createOrUpdate, getCorner, getHeight, getWidth } from './extent.js';\nimport { toSize } from './size.js';\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\n\nexport function getForProjection(projection) {\n  var tileGrid = projection.getDefaultTileGrid();\n\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n\n  return tileGrid;\n}\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\n\nexport function wrapX(tileGrid, tileCoord, projection) {\n  var z = tileCoord[0];\n  var center = tileGrid.getTileCoordCenter(tileCoord);\n  var projectionExtent = extentFromProjection(projection);\n\n  if (!containsCoordinate(projectionExtent, center)) {\n    var worldWidth = getWidth(projectionExtent);\n    var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  } else {\n    return tileCoord;\n  }\n}\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent/Corner.js\").default=} opt_corner Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\n\nexport function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {\n  var corner = opt_corner !== undefined ? opt_corner : Corner.TOP_LEFT;\n  var resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: opt_tileSize\n  });\n}\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions=} opt_options Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\n\nexport function createXYZ(opt_options) {\n  var xyzOptions = opt_options || {};\n  var extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n  var gridOptions = {\n    extent: extent,\n    minZoom: xyzOptions.minZoom,\n    tileSize: xyzOptions.tileSize,\n    resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution)\n  };\n  return new TileGrid(gridOptions);\n}\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number=} opt_maxResolution Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\n\nfunction resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize, opt_maxResolution) {\n  var maxZoom = opt_maxZoom !== undefined ? opt_maxZoom : DEFAULT_MAX_ZOOM;\n  var height = getHeight(extent);\n  var width = getWidth(extent);\n  var tileSize = toSize(opt_tileSize !== undefined ? opt_tileSize : DEFAULT_TILE_SIZE);\n  var maxResolution = opt_maxResolution > 0 ? opt_maxResolution : Math.max(width / tileSize[0], height / tileSize[1]);\n  var length = maxZoom + 1;\n  var resolutions = new Array(length);\n\n  for (var z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n\n  return resolutions;\n}\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent/Corner.js\").default=} opt_corner Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\n\n\nexport function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {\n  var extent = extentFromProjection(projection);\n  return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);\n}\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\n\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  var extent = projection.getExtent();\n\n  if (!extent) {\n    var half = 180 * METERS_PER_UNIT[Units.DEGREES] / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n\n  return extent;\n}","map":{"version":3,"sources":["src/tilegrid.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/tilegrid\n */\nimport Corner from './extent/Corner.js';\nimport TileGrid from './tilegrid/TileGrid.js';\nimport Units from './proj/Units.js';\nimport { DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { METERS_PER_UNIT, get as getProjection } from './proj.js';\nimport { containsCoordinate, createOrUpdate, getCorner, getHeight, getWidth, } from './extent.js';\nimport { toSize } from './size.js';\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\nexport function getForProjection(projection) {\n    var tileGrid = projection.getDefaultTileGrid();\n    if (!tileGrid) {\n        tileGrid = createForProjection(projection);\n        projection.setDefaultTileGrid(tileGrid);\n    }\n    return tileGrid;\n}\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\nexport function wrapX(tileGrid, tileCoord, projection) {\n    var z = tileCoord[0];\n    var center = tileGrid.getTileCoordCenter(tileCoord);\n    var projectionExtent = extentFromProjection(projection);\n    if (!containsCoordinate(projectionExtent, center)) {\n        var worldWidth = getWidth(projectionExtent);\n        var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n        center[0] += worldWidth * worldsAway;\n        return tileGrid.getTileCoordForCoordAndZ(center, z);\n    }\n    else {\n        return tileCoord;\n    }\n}\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent/Corner.js\").default=} opt_corner Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {\n    var corner = opt_corner !== undefined ? opt_corner : Corner.TOP_LEFT;\n    var resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);\n    return new TileGrid({\n        extent: extent,\n        origin: getCorner(extent, corner),\n        resolutions: resolutions,\n        tileSize: opt_tileSize,\n    });\n}\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions=} opt_options Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\nexport function createXYZ(opt_options) {\n    var xyzOptions = opt_options || {};\n    var extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n    var gridOptions = {\n        extent: extent,\n        minZoom: xyzOptions.minZoom,\n        tileSize: xyzOptions.tileSize,\n        resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution),\n    };\n    return new TileGrid(gridOptions);\n}\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number=} opt_maxResolution Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\nfunction resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize, opt_maxResolution) {\n    var maxZoom = opt_maxZoom !== undefined ? opt_maxZoom : DEFAULT_MAX_ZOOM;\n    var height = getHeight(extent);\n    var width = getWidth(extent);\n    var tileSize = toSize(opt_tileSize !== undefined ? opt_tileSize : DEFAULT_TILE_SIZE);\n    var maxResolution = opt_maxResolution > 0\n        ? opt_maxResolution\n        : Math.max(width / tileSize[0], height / tileSize[1]);\n    var length = maxZoom + 1;\n    var resolutions = new Array(length);\n    for (var z = 0; z < length; ++z) {\n        resolutions[z] = maxResolution / Math.pow(2, z);\n    }\n    return resolutions;\n}\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent/Corner.js\").default=} opt_corner Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {\n    var extent = extentFromProjection(projection);\n    return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);\n}\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\nexport function extentFromProjection(projection) {\n    projection = getProjection(projection);\n    var extent = projection.getExtent();\n    if (!extent) {\n        var half = (180 * METERS_PER_UNIT[Units.DEGREES]) / projection.getMetersPerUnit();\n        extent = createOrUpdate(-half, -half, half, half);\n    }\n    return extent;\n}\n//# sourceMappingURL=tilegrid.js.map"]},"metadata":{},"sourceType":"module"}