{"ast":null,"code":"/**\n * @module ol/reproj\n */\nimport { IMAGE_SMOOTHING_DISABLED } from './source/common.js';\nimport { assign } from './obj.js';\nimport { containsCoordinate, createEmpty, extend, forEachCorner, getCenter, getHeight, getTopLeft, getWidth } from './extent.js';\nimport { createCanvasContext2D } from './dom.js';\nimport { getPointResolution, transform } from './proj.js';\nimport { solveLinearSystem } from './math.js';\nvar brokenDiagonalRendering_;\n/**\n * This draws a small triangle into a canvas by setting the triangle as the clip region\n * and then drawing a (too large) rectangle\n *\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\n * @param {number} v1 The y-coordinate of the second point.\n * @param {number} u2 The x-coordinate of the third point.\n * @param {number} v2 The y-coordinate of the third point.\n */\n\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\n  ctx.beginPath();\n  ctx.moveTo(0, 0);\n  ctx.lineTo(u1, v1);\n  ctx.lineTo(u2, v2);\n  ctx.closePath();\n  ctx.save();\n  ctx.clip();\n  ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\n  ctx.restore();\n}\n/**\n * Given the data from getImageData, see if the right values appear at the provided offset.\n * Returns true if either the color or transparency is off\n *\n * @param {Uint8ClampedArray} data The data returned from getImageData\n * @param {number} offset The pixel offset from the start of data.\n * @return {boolean} true if the diagonal rendering is broken\n */\n\n\nfunction verifyBrokenDiagonalRendering(data, offset) {\n  // the values ought to be close to the rgba(210, 0, 0, 0.75)\n  return Math.abs(data[offset * 4] - 210) > 2 || Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2;\n}\n/**\n * Determines if the current browser configuration can render triangular clip regions correctly.\n * This value is cached so the function is only expensive the first time called.\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\n * IE also doesn't. Chrome works, and everything seems to work on OSX and Android. This function caches the\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\n * running, but lets hope not.\n *\n * @return {boolean} true if the Diagonal Rendering is broken.\n */\n\n\nfunction isBrokenDiagonalRendering() {\n  if (brokenDiagonalRendering_ === undefined) {\n    var ctx = document.createElement('canvas').getContext('2d');\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\n    drawTestTriangle(ctx, 4, 5, 4, 0);\n    drawTestTriangle(ctx, 4, 5, 0, 5);\n    var data = ctx.getImageData(0, 0, 3, 3).data;\n    brokenDiagonalRendering_ = verifyBrokenDiagonalRendering(data, 0) || verifyBrokenDiagonalRendering(data, 4) || verifyBrokenDiagonalRendering(data, 8);\n  }\n\n  return brokenDiagonalRendering_;\n}\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\n\n\nexport function calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution) {\n  var sourceCenter = transform(targetCenter, targetProj, sourceProj); // calculate the ideal resolution of the source data\n\n  var sourceResolution = getPointResolution(targetProj, targetResolution, targetCenter);\n  var targetMetersPerUnit = targetProj.getMetersPerUnit();\n\n  if (targetMetersPerUnit !== undefined) {\n    sourceResolution *= targetMetersPerUnit;\n  }\n\n  var sourceMetersPerUnit = sourceProj.getMetersPerUnit();\n\n  if (sourceMetersPerUnit !== undefined) {\n    sourceResolution /= sourceMetersPerUnit;\n  } // Based on the projection properties, the point resolution at the specified\n  // coordinates may be slightly different. We need to reverse-compensate this\n  // in order to achieve optimal results.\n\n\n  var sourceExtent = sourceProj.getExtent();\n\n  if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\n    var compensationFactor = getPointResolution(sourceProj, sourceResolution, sourceCenter) / sourceResolution;\n\n    if (isFinite(compensationFactor) && compensationFactor > 0) {\n      sourceResolution /= compensationFactor;\n    }\n  }\n\n  return sourceResolution;\n}\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\n\nexport function calculateSourceExtentResolution(sourceProj, targetProj, targetExtent, targetResolution) {\n  var targetCenter = getCenter(targetExtent);\n  var sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);\n\n  if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n    forEachCorner(targetExtent, function (corner) {\n      sourceResolution = calculateSourceResolution(sourceProj, targetProj, corner, targetResolution);\n      return isFinite(sourceResolution) && sourceResolution > 0;\n    });\n  }\n\n  return sourceResolution;\n}\n/**\n * Renders the source data into new canvas based on the triangulation.\n *\n * @param {number} width Width of the canvas.\n * @param {number} height Height of the canvas.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} sourceResolution Source resolution.\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\n * @param {number} targetResolution Target resolution.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation\n * Calculated triangulation.\n * @param {Array<{extent: import(\"./extent.js\").Extent,\n *                 image: (HTMLCanvasElement|HTMLImageElement|HTMLVideoElement)}>} sources\n * Array of sources.\n * @param {number} gutter Gutter of the sources.\n * @param {boolean=} opt_renderEdges Render reprojection edges.\n * @param {object=} opt_contextOptions Properties to set on the canvas context.\n * @return {HTMLCanvasElement} Canvas with reprojected data.\n */\n\nexport function render(width, height, pixelRatio, sourceResolution, sourceExtent, targetResolution, targetExtent, triangulation, sources, gutter, opt_renderEdges, opt_contextOptions) {\n  var context = createCanvasContext2D(Math.round(pixelRatio * width), Math.round(pixelRatio * height));\n  assign(context, opt_contextOptions);\n\n  if (sources.length === 0) {\n    return context.canvas;\n  }\n\n  context.scale(pixelRatio, pixelRatio);\n\n  function pixelRound(value) {\n    return Math.round(value * pixelRatio) / pixelRatio;\n  }\n\n  context.globalCompositeOperation = 'lighter';\n  var sourceDataExtent = createEmpty();\n  sources.forEach(function (src, i, arr) {\n    extend(sourceDataExtent, src.extent);\n  });\n  var canvasWidthInUnits = getWidth(sourceDataExtent);\n  var canvasHeightInUnits = getHeight(sourceDataExtent);\n  var stitchContext = createCanvasContext2D(Math.round(pixelRatio * canvasWidthInUnits / sourceResolution), Math.round(pixelRatio * canvasHeightInUnits / sourceResolution));\n  assign(stitchContext, opt_contextOptions);\n  var stitchScale = pixelRatio / sourceResolution;\n  sources.forEach(function (src, i, arr) {\n    var xPos = src.extent[0] - sourceDataExtent[0];\n    var yPos = -(src.extent[3] - sourceDataExtent[3]);\n    var srcWidth = getWidth(src.extent);\n    var srcHeight = getHeight(src.extent); // This test should never fail -- but it does. Need to find a fix the upstream condition\n\n    if (src.image.width > 0 && src.image.height > 0) {\n      stitchContext.drawImage(src.image, gutter, gutter, src.image.width - 2 * gutter, src.image.height - 2 * gutter, xPos * stitchScale, yPos * stitchScale, srcWidth * stitchScale, srcHeight * stitchScale);\n    }\n  });\n  var targetTopLeft = getTopLeft(targetExtent);\n  triangulation.getTriangles().forEach(function (triangle, i, arr) {\n    /* Calculate affine transform (src -> dst)\n     * Resulting matrix can be used to transform coordinate\n     * from `sourceProjection` to destination pixels.\n     *\n     * To optimize number of context calls and increase numerical stability,\n     * we also do the following operations:\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\n     *\n     * Src points: xi, yi\n     * Dst points: ui, vi\n     * Affine coefficients: aij\n     *\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\n     */\n    var source = triangle.source;\n    var target = triangle.target;\n    var x0 = source[0][0],\n        y0 = source[0][1];\n    var x1 = source[1][0],\n        y1 = source[1][1];\n    var x2 = source[2][0],\n        y2 = source[2][1]; // Make sure that everything is on pixel boundaries\n\n    var u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\n    var v0 = pixelRound(-(target[0][1] - targetTopLeft[1]) / targetResolution);\n    var u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\n    var v1 = pixelRound(-(target[1][1] - targetTopLeft[1]) / targetResolution);\n    var u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\n    var v2 = pixelRound(-(target[2][1] - targetTopLeft[1]) / targetResolution); // Shift all the source points to improve numerical stability\n    // of all the subsequent calculations. The [x0, y0] is used here.\n    // This is also used to simplify the linear system.\n\n    var sourceNumericalShiftX = x0;\n    var sourceNumericalShiftY = y0;\n    x0 = 0;\n    y0 = 0;\n    x1 -= sourceNumericalShiftX;\n    y1 -= sourceNumericalShiftY;\n    x2 -= sourceNumericalShiftX;\n    y2 -= sourceNumericalShiftY;\n    var augmentedMatrix = [[x1, y1, 0, 0, u1 - u0], [x2, y2, 0, 0, u2 - u0], [0, 0, x1, y1, v1 - v0], [0, 0, x2, y2, v2 - v0]];\n    var affineCoefs = solveLinearSystem(augmentedMatrix);\n\n    if (!affineCoefs) {\n      return;\n    }\n\n    context.save();\n    context.beginPath();\n\n    if (isBrokenDiagonalRendering() || opt_contextOptions === IMAGE_SMOOTHING_DISABLED) {\n      // Make sure that all lines are horizontal or vertical\n      context.moveTo(u1, v1); // This is the diagonal line. Do it in 4 steps\n\n      var steps = 4;\n      var ud = u0 - u1;\n      var vd = v0 - v1;\n\n      for (var step = 0; step < steps; step++) {\n        // Go horizontally\n        context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound(step * vd / (steps - 1))); // Go vertically\n\n        if (step != steps - 1) {\n          context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound((step + 1) * vd / (steps - 1)));\n        }\n      } // We are almost at u0r, v0r\n\n\n      context.lineTo(u2, v2);\n    } else {\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n    }\n\n    context.clip();\n    context.transform(affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);\n    context.translate(sourceDataExtent[0] - sourceNumericalShiftX, sourceDataExtent[3] - sourceNumericalShiftY);\n    context.scale(sourceResolution / pixelRatio, -sourceResolution / pixelRatio);\n    context.drawImage(stitchContext.canvas, 0, 0);\n    context.restore();\n  });\n\n  if (opt_renderEdges) {\n    context.save();\n    context.globalCompositeOperation = 'source-over';\n    context.strokeStyle = 'black';\n    context.lineWidth = 1;\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\n      var target = triangle.target;\n      var u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\n      var v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\n      var u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\n      var v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\n      var u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\n      var v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\n      context.beginPath();\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n      context.closePath();\n      context.stroke();\n    });\n    context.restore();\n  }\n\n  return context.canvas;\n}","map":{"version":3,"sources":["src/reproj.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/reproj\n */\nimport { IMAGE_SMOOTHING_DISABLED } from './source/common.js';\nimport { assign } from './obj.js';\nimport { containsCoordinate, createEmpty, extend, forEachCorner, getCenter, getHeight, getTopLeft, getWidth, } from './extent.js';\nimport { createCanvasContext2D } from './dom.js';\nimport { getPointResolution, transform } from './proj.js';\nimport { solveLinearSystem } from './math.js';\nvar brokenDiagonalRendering_;\n/**\n * This draws a small triangle into a canvas by setting the triangle as the clip region\n * and then drawing a (too large) rectangle\n *\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\n * @param {number} v1 The y-coordinate of the second point.\n * @param {number} u2 The x-coordinate of the third point.\n * @param {number} v2 The y-coordinate of the third point.\n */\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(u1, v1);\n    ctx.lineTo(u2, v2);\n    ctx.closePath();\n    ctx.save();\n    ctx.clip();\n    ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\n    ctx.restore();\n}\n/**\n * Given the data from getImageData, see if the right values appear at the provided offset.\n * Returns true if either the color or transparency is off\n *\n * @param {Uint8ClampedArray} data The data returned from getImageData\n * @param {number} offset The pixel offset from the start of data.\n * @return {boolean} true if the diagonal rendering is broken\n */\nfunction verifyBrokenDiagonalRendering(data, offset) {\n    // the values ought to be close to the rgba(210, 0, 0, 0.75)\n    return (Math.abs(data[offset * 4] - 210) > 2 ||\n        Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2);\n}\n/**\n * Determines if the current browser configuration can render triangular clip regions correctly.\n * This value is cached so the function is only expensive the first time called.\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\n * IE also doesn't. Chrome works, and everything seems to work on OSX and Android. This function caches the\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\n * running, but lets hope not.\n *\n * @return {boolean} true if the Diagonal Rendering is broken.\n */\nfunction isBrokenDiagonalRendering() {\n    if (brokenDiagonalRendering_ === undefined) {\n        var ctx = document.createElement('canvas').getContext('2d');\n        ctx.globalCompositeOperation = 'lighter';\n        ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\n        drawTestTriangle(ctx, 4, 5, 4, 0);\n        drawTestTriangle(ctx, 4, 5, 0, 5);\n        var data = ctx.getImageData(0, 0, 3, 3).data;\n        brokenDiagonalRendering_ =\n            verifyBrokenDiagonalRendering(data, 0) ||\n                verifyBrokenDiagonalRendering(data, 4) ||\n                verifyBrokenDiagonalRendering(data, 8);\n    }\n    return brokenDiagonalRendering_;\n}\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution) {\n    var sourceCenter = transform(targetCenter, targetProj, sourceProj);\n    // calculate the ideal resolution of the source data\n    var sourceResolution = getPointResolution(targetProj, targetResolution, targetCenter);\n    var targetMetersPerUnit = targetProj.getMetersPerUnit();\n    if (targetMetersPerUnit !== undefined) {\n        sourceResolution *= targetMetersPerUnit;\n    }\n    var sourceMetersPerUnit = sourceProj.getMetersPerUnit();\n    if (sourceMetersPerUnit !== undefined) {\n        sourceResolution /= sourceMetersPerUnit;\n    }\n    // Based on the projection properties, the point resolution at the specified\n    // coordinates may be slightly different. We need to reverse-compensate this\n    // in order to achieve optimal results.\n    var sourceExtent = sourceProj.getExtent();\n    if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\n        var compensationFactor = getPointResolution(sourceProj, sourceResolution, sourceCenter) /\n            sourceResolution;\n        if (isFinite(compensationFactor) && compensationFactor > 0) {\n            sourceResolution /= compensationFactor;\n        }\n    }\n    return sourceResolution;\n}\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceExtentResolution(sourceProj, targetProj, targetExtent, targetResolution) {\n    var targetCenter = getCenter(targetExtent);\n    var sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n        forEachCorner(targetExtent, function (corner) {\n            sourceResolution = calculateSourceResolution(sourceProj, targetProj, corner, targetResolution);\n            return isFinite(sourceResolution) && sourceResolution > 0;\n        });\n    }\n    return sourceResolution;\n}\n/**\n * Renders the source data into new canvas based on the triangulation.\n *\n * @param {number} width Width of the canvas.\n * @param {number} height Height of the canvas.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} sourceResolution Source resolution.\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\n * @param {number} targetResolution Target resolution.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation\n * Calculated triangulation.\n * @param {Array<{extent: import(\"./extent.js\").Extent,\n *                 image: (HTMLCanvasElement|HTMLImageElement|HTMLVideoElement)}>} sources\n * Array of sources.\n * @param {number} gutter Gutter of the sources.\n * @param {boolean=} opt_renderEdges Render reprojection edges.\n * @param {object=} opt_contextOptions Properties to set on the canvas context.\n * @return {HTMLCanvasElement} Canvas with reprojected data.\n */\nexport function render(width, height, pixelRatio, sourceResolution, sourceExtent, targetResolution, targetExtent, triangulation, sources, gutter, opt_renderEdges, opt_contextOptions) {\n    var context = createCanvasContext2D(Math.round(pixelRatio * width), Math.round(pixelRatio * height));\n    assign(context, opt_contextOptions);\n    if (sources.length === 0) {\n        return context.canvas;\n    }\n    context.scale(pixelRatio, pixelRatio);\n    function pixelRound(value) {\n        return Math.round(value * pixelRatio) / pixelRatio;\n    }\n    context.globalCompositeOperation = 'lighter';\n    var sourceDataExtent = createEmpty();\n    sources.forEach(function (src, i, arr) {\n        extend(sourceDataExtent, src.extent);\n    });\n    var canvasWidthInUnits = getWidth(sourceDataExtent);\n    var canvasHeightInUnits = getHeight(sourceDataExtent);\n    var stitchContext = createCanvasContext2D(Math.round((pixelRatio * canvasWidthInUnits) / sourceResolution), Math.round((pixelRatio * canvasHeightInUnits) / sourceResolution));\n    assign(stitchContext, opt_contextOptions);\n    var stitchScale = pixelRatio / sourceResolution;\n    sources.forEach(function (src, i, arr) {\n        var xPos = src.extent[0] - sourceDataExtent[0];\n        var yPos = -(src.extent[3] - sourceDataExtent[3]);\n        var srcWidth = getWidth(src.extent);\n        var srcHeight = getHeight(src.extent);\n        // This test should never fail -- but it does. Need to find a fix the upstream condition\n        if (src.image.width > 0 && src.image.height > 0) {\n            stitchContext.drawImage(src.image, gutter, gutter, src.image.width - 2 * gutter, src.image.height - 2 * gutter, xPos * stitchScale, yPos * stitchScale, srcWidth * stitchScale, srcHeight * stitchScale);\n        }\n    });\n    var targetTopLeft = getTopLeft(targetExtent);\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\n        /* Calculate affine transform (src -> dst)\n         * Resulting matrix can be used to transform coordinate\n         * from `sourceProjection` to destination pixels.\n         *\n         * To optimize number of context calls and increase numerical stability,\n         * we also do the following operations:\n         * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\n         * here before solving the linear system so [ui, vi] are pixel coordinates.\n         *\n         * Src points: xi, yi\n         * Dst points: ui, vi\n         * Affine coefficients: aij\n         *\n         * | x0 y0 1  0  0 0 |   |a00|   |u0|\n         * | x1 y1 1  0  0 0 |   |a01|   |u1|\n         * | x2 y2 1  0  0 0 | x |a02| = |u2|\n         * |  0  0 0 x0 y0 1 |   |a10|   |v0|\n         * |  0  0 0 x1 y1 1 |   |a11|   |v1|\n         * |  0  0 0 x2 y2 1 |   |a12|   |v2|\n         */\n        var source = triangle.source;\n        var target = triangle.target;\n        var x0 = source[0][0], y0 = source[0][1];\n        var x1 = source[1][0], y1 = source[1][1];\n        var x2 = source[2][0], y2 = source[2][1];\n        // Make sure that everything is on pixel boundaries\n        var u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\n        var v0 = pixelRound(-(target[0][1] - targetTopLeft[1]) / targetResolution);\n        var u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\n        var v1 = pixelRound(-(target[1][1] - targetTopLeft[1]) / targetResolution);\n        var u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\n        var v2 = pixelRound(-(target[2][1] - targetTopLeft[1]) / targetResolution);\n        // Shift all the source points to improve numerical stability\n        // of all the subsequent calculations. The [x0, y0] is used here.\n        // This is also used to simplify the linear system.\n        var sourceNumericalShiftX = x0;\n        var sourceNumericalShiftY = y0;\n        x0 = 0;\n        y0 = 0;\n        x1 -= sourceNumericalShiftX;\n        y1 -= sourceNumericalShiftY;\n        x2 -= sourceNumericalShiftX;\n        y2 -= sourceNumericalShiftY;\n        var augmentedMatrix = [\n            [x1, y1, 0, 0, u1 - u0],\n            [x2, y2, 0, 0, u2 - u0],\n            [0, 0, x1, y1, v1 - v0],\n            [0, 0, x2, y2, v2 - v0],\n        ];\n        var affineCoefs = solveLinearSystem(augmentedMatrix);\n        if (!affineCoefs) {\n            return;\n        }\n        context.save();\n        context.beginPath();\n        if (isBrokenDiagonalRendering() ||\n            opt_contextOptions === IMAGE_SMOOTHING_DISABLED) {\n            // Make sure that all lines are horizontal or vertical\n            context.moveTo(u1, v1);\n            // This is the diagonal line. Do it in 4 steps\n            var steps = 4;\n            var ud = u0 - u1;\n            var vd = v0 - v1;\n            for (var step = 0; step < steps; step++) {\n                // Go horizontally\n                context.lineTo(u1 + pixelRound(((step + 1) * ud) / steps), v1 + pixelRound((step * vd) / (steps - 1)));\n                // Go vertically\n                if (step != steps - 1) {\n                    context.lineTo(u1 + pixelRound(((step + 1) * ud) / steps), v1 + pixelRound(((step + 1) * vd) / (steps - 1)));\n                }\n            }\n            // We are almost at u0r, v0r\n            context.lineTo(u2, v2);\n        }\n        else {\n            context.moveTo(u1, v1);\n            context.lineTo(u0, v0);\n            context.lineTo(u2, v2);\n        }\n        context.clip();\n        context.transform(affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);\n        context.translate(sourceDataExtent[0] - sourceNumericalShiftX, sourceDataExtent[3] - sourceNumericalShiftY);\n        context.scale(sourceResolution / pixelRatio, -sourceResolution / pixelRatio);\n        context.drawImage(stitchContext.canvas, 0, 0);\n        context.restore();\n    });\n    if (opt_renderEdges) {\n        context.save();\n        context.globalCompositeOperation = 'source-over';\n        context.strokeStyle = 'black';\n        context.lineWidth = 1;\n        triangulation.getTriangles().forEach(function (triangle, i, arr) {\n            var target = triangle.target;\n            var u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\n            var v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\n            var u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\n            var v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\n            var u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\n            var v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\n            context.beginPath();\n            context.moveTo(u1, v1);\n            context.lineTo(u0, v0);\n            context.lineTo(u2, v2);\n            context.closePath();\n            context.stroke();\n        });\n        context.restore();\n    }\n    return context.canvas;\n}\n//# sourceMappingURL=reproj.js.map"]},"metadata":{},"sourceType":"module"}