{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/Tile\n */\n\n\nimport Event from '../events/Event.js';\nimport Source from './Source.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport { abstract } from '../util.js';\nimport { assert } from '../asserts.js';\nimport { equivalent } from '../proj.js';\nimport { getKeyZXY, withinExtentAndZ } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection, wrapX } from '../tilegrid.js';\nimport { scale as scaleSize, toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {number} [tilePixelRatio]\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {import(\"./State.js\").default} [state]\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n * @property {string} [key]\n * @property {number} [zDirection=0]\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @abstract\n * @api\n */\n\nvar TileSource =\n/** @class */\nfunction (_super) {\n  __extends(TileSource, _super);\n  /**\n   * @param {Options} options SourceTile source options.\n   */\n\n\n  function TileSource(options) {\n    var _this = _super.call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX\n    }) || this;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n\n    _this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.tilePixelRatio_ = options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n    /**\n     * @protected\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n\n    _this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n    var tileSize = [256, 256];\n    var tileGrid = options.tileGrid;\n\n    if (tileGrid) {\n      toSize(tileGrid.getTileSize(tileGrid.getMinZoom()), tileSize);\n    }\n    /**\n     * @protected\n     * @type {import(\"../TileCache.js\").default}\n     */\n\n\n    _this.tileCache = new TileCache(options.cacheSize || 0);\n    /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */\n\n    _this.tmpSize = [0, 0];\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.key_ = options.key || '';\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */\n\n    _this.tileOptions = {\n      transition: options.transition\n    };\n    /**\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\n     * by a renderer if the views resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @type {number}\n     */\n\n    _this.zDirection = options.zDirection ? options.zDirection : 0;\n    return _this;\n  }\n  /**\n   * @return {boolean} Can expire cache.\n   */\n\n\n  TileSource.prototype.canExpireCache = function () {\n    return this.tileCache.canExpireCache();\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n\n\n  TileSource.prototype.expireCache = function (projection, usedTiles) {\n    var tileCache = this.getTileCacheForProjection(projection);\n\n    if (tileCache) {\n      tileCache.expireCache(usedTiles);\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {number} z Zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\n   *     loaded tile.  If the callback returns `false`, the tile will not be\n   *     considered loaded.\n   * @return {boolean} The tile range is fully covered with loaded tiles.\n   */\n\n\n  TileSource.prototype.forEachLoadedTile = function (projection, z, tileRange, callback) {\n    var tileCache = this.getTileCacheForProjection(projection);\n\n    if (!tileCache) {\n      return false;\n    }\n\n    var covered = true;\n    var tile, tileCoordKey, loaded;\n\n    for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        tileCoordKey = getKeyZXY(z, x, y);\n        loaded = false;\n\n        if (tileCache.containsKey(tileCoordKey)) {\n          tile =\n          /** @type {!import(\"../Tile.js\").default} */\n          tileCache.get(tileCoordKey);\n          loaded = tile.getState() === TileState.LOADED;\n\n          if (loaded) {\n            loaded = callback(tile) !== false;\n          }\n        }\n\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n\n    return covered;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n\n\n  TileSource.prototype.getGutterForProjection = function (projection) {\n    return 0;\n  };\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @protected\n   */\n\n\n  TileSource.prototype.getKey = function () {\n    return this.key_;\n  };\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n\n\n  TileSource.prototype.setKey = function (key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n\n\n  TileSource.prototype.getOpaque = function (projection) {\n    return this.opaque_;\n  };\n  /**\n   * @return {Array<number>} Resolutions.\n   */\n\n\n  TileSource.prototype.getResolutions = function () {\n    return this.tileGrid.getResolutions();\n  };\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   */\n\n\n  TileSource.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n    return abstract();\n  };\n  /**\n   * Return the tile grid of the tile source.\n   * @return {import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @api\n   */\n\n\n  TileSource.prototype.getTileGrid = function () {\n    return this.tileGrid;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n\n\n  TileSource.prototype.getTileGridForProjection = function (projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    } else {\n      return this.tileGrid;\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   * @protected\n   */\n\n\n  TileSource.prototype.getTileCacheForProjection = function (projection) {\n    assert(equivalent(this.getProjection(), projection), 68 // A VectorTile source can only be rendered if it has a projection compatible with the view projection.\n    );\n    return this.tileCache;\n  };\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n\n\n  TileSource.prototype.getTilePixelRatio = function (pixelRatio) {\n    return this.tilePixelRatio_;\n  };\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n\n\n  TileSource.prototype.getTilePixelSize = function (z, pixelRatio, projection) {\n    var tileGrid = this.getTileGridForProjection(projection);\n    var tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    } else {\n      return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n    }\n  };\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../proj/Projection.js\").default=} opt_projection Projection.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n\n\n  TileSource.prototype.getTileCoordForTileUrlFunction = function (tileCoord, opt_projection) {\n    var projection = opt_projection !== undefined ? opt_projection : this.getProjection();\n    var tileGrid = this.getTileGridForProjection(projection);\n\n    if (this.getWrapX() && projection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\n    }\n\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  };\n  /**\n   * Remove all cached tiles from the source. The next render cycle will fetch new tiles.\n   * @api\n   */\n\n\n  TileSource.prototype.clear = function () {\n    this.tileCache.clear();\n  };\n\n  TileSource.prototype.refresh = function () {\n    this.clear();\n\n    _super.prototype.refresh.call(this);\n  };\n  /**\n   * Increases the cache size if needed\n   * @param {number} tileCount Minimum number of tiles needed.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n\n\n  TileSource.prototype.updateCacheSize = function (tileCount, projection) {\n    var tileCache = this.getTileCacheForProjection(projection);\n\n    if (tileCount > tileCache.highWaterMark) {\n      tileCache.highWaterMark = tileCount;\n    }\n  };\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n\n\n  TileSource.prototype.useTile = function (z, x, y, projection) {};\n\n  return TileSource;\n}(Source);\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\n\n\nvar TileSourceEvent =\n/** @class */\nfunction (_super) {\n  __extends(TileSourceEvent, _super);\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Tile.js\").default} tile The tile.\n   */\n\n\n  function TileSourceEvent(type, tile) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */\n\n\n    _this.tile = tile;\n    return _this;\n  }\n\n  return TileSourceEvent;\n}(Event);\n\nexport { TileSourceEvent };\nexport default TileSource;","map":{"version":3,"sources":["../src/source/Tile.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/source/Tile\n */\nimport Event from '../events/Event.js';\nimport Source from './Source.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport { abstract } from '../util.js';\nimport { assert } from '../asserts.js';\nimport { equivalent } from '../proj.js';\nimport { getKeyZXY, withinExtentAndZ } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection, wrapX, } from '../tilegrid.js';\nimport { scale as scaleSize, toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {number} [tilePixelRatio]\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {import(\"./State.js\").default} [state]\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n * @property {string} [key]\n * @property {number} [zDirection=0]\n */\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @abstract\n * @api\n */\nvar TileSource = /** @class */ (function (_super) {\n    __extends(TileSource, _super);\n    /**\n     * @param {Options} options SourceTile source options.\n     */\n    function TileSource(options) {\n        var _this = _super.call(this, {\n            attributions: options.attributions,\n            attributionsCollapsible: options.attributionsCollapsible,\n            projection: options.projection,\n            state: options.state,\n            wrapX: options.wrapX,\n        }) || this;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.tilePixelRatio_ =\n            options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n        /**\n         * @protected\n         * @type {import(\"../tilegrid/TileGrid.js\").default}\n         */\n        _this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n        var tileSize = [256, 256];\n        var tileGrid = options.tileGrid;\n        if (tileGrid) {\n            toSize(tileGrid.getTileSize(tileGrid.getMinZoom()), tileSize);\n        }\n        /**\n         * @protected\n         * @type {import(\"../TileCache.js\").default}\n         */\n        _this.tileCache = new TileCache(options.cacheSize || 0);\n        /**\n         * @protected\n         * @type {import(\"../size.js\").Size}\n         */\n        _this.tmpSize = [0, 0];\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.key_ = options.key || '';\n        /**\n         * @protected\n         * @type {import(\"../Tile.js\").Options}\n         */\n        _this.tileOptions = { transition: options.transition };\n        /**\n         * zDirection hint, read by the renderer. Indicates which resolution should be used\n         * by a renderer if the views resolution does not match any resolution of the tile source.\n         * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n         * will be used. If -1, the nearest higher resolution will be used.\n         * @type {number}\n         */\n        _this.zDirection = options.zDirection ? options.zDirection : 0;\n        return _this;\n    }\n    /**\n     * @return {boolean} Can expire cache.\n     */\n    TileSource.prototype.canExpireCache = function () {\n        return this.tileCache.canExpireCache();\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {!Object<string, boolean>} usedTiles Used tiles.\n     */\n    TileSource.prototype.expireCache = function (projection, usedTiles) {\n        var tileCache = this.getTileCacheForProjection(projection);\n        if (tileCache) {\n            tileCache.expireCache(usedTiles);\n        }\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {number} z Zoom level.\n     * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n     * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\n     *     loaded tile.  If the callback returns `false`, the tile will not be\n     *     considered loaded.\n     * @return {boolean} The tile range is fully covered with loaded tiles.\n     */\n    TileSource.prototype.forEachLoadedTile = function (projection, z, tileRange, callback) {\n        var tileCache = this.getTileCacheForProjection(projection);\n        if (!tileCache) {\n            return false;\n        }\n        var covered = true;\n        var tile, tileCoordKey, loaded;\n        for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n            for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n                tileCoordKey = getKeyZXY(z, x, y);\n                loaded = false;\n                if (tileCache.containsKey(tileCoordKey)) {\n                    tile = /** @type {!import(\"../Tile.js\").default} */ (tileCache.get(tileCoordKey));\n                    loaded = tile.getState() === TileState.LOADED;\n                    if (loaded) {\n                        loaded = callback(tile) !== false;\n                    }\n                }\n                if (!loaded) {\n                    covered = false;\n                }\n            }\n        }\n        return covered;\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {number} Gutter.\n     */\n    TileSource.prototype.getGutterForProjection = function (projection) {\n        return 0;\n    };\n    /**\n     * Return the key to be used for all tiles in the source.\n     * @return {string} The key for all tiles.\n     * @protected\n     */\n    TileSource.prototype.getKey = function () {\n        return this.key_;\n    };\n    /**\n     * Set the value to be used as the key for all tiles in the source.\n     * @param {string} key The key for tiles.\n     * @protected\n     */\n    TileSource.prototype.setKey = function (key) {\n        if (this.key_ !== key) {\n            this.key_ = key;\n            this.changed();\n        }\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {boolean} Opaque.\n     */\n    TileSource.prototype.getOpaque = function (projection) {\n        return this.opaque_;\n    };\n    /**\n     * @return {Array<number>} Resolutions.\n     */\n    TileSource.prototype.getResolutions = function () {\n        return this.tileGrid.getResolutions();\n    };\n    /**\n     * @abstract\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!import(\"../Tile.js\").default} Tile.\n     */\n    TileSource.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n        return abstract();\n    };\n    /**\n     * Return the tile grid of the tile source.\n     * @return {import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n     * @api\n     */\n    TileSource.prototype.getTileGrid = function () {\n        return this.tileGrid;\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n     */\n    TileSource.prototype.getTileGridForProjection = function (projection) {\n        if (!this.tileGrid) {\n            return getTileGridForProjection(projection);\n        }\n        else {\n            return this.tileGrid;\n        }\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../TileCache.js\").default} Tile cache.\n     * @protected\n     */\n    TileSource.prototype.getTileCacheForProjection = function (projection) {\n        assert(equivalent(this.getProjection(), projection), 68 // A VectorTile source can only be rendered if it has a projection compatible with the view projection.\n        );\n        return this.tileCache;\n    };\n    /**\n     * Get the tile pixel ratio for this source. Subclasses may override this\n     * method, which is meant to return a supported pixel ratio that matches the\n     * provided `pixelRatio` as close as possible.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {number} Tile pixel ratio.\n     */\n    TileSource.prototype.getTilePixelRatio = function (pixelRatio) {\n        return this.tilePixelRatio_;\n    };\n    /**\n     * @param {number} z Z.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../size.js\").Size} Tile size.\n     */\n    TileSource.prototype.getTilePixelSize = function (z, pixelRatio, projection) {\n        var tileGrid = this.getTileGridForProjection(projection);\n        var tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n        var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n        if (tilePixelRatio == 1) {\n            return tileSize;\n        }\n        else {\n            return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n        }\n    };\n    /**\n     * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n     * is outside the resolution and extent range of the tile grid, `null` will be\n     * returned.\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {import(\"../proj/Projection.js\").default=} opt_projection Projection.\n     * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n     *     null if no tile URL should be created for the passed `tileCoord`.\n     */\n    TileSource.prototype.getTileCoordForTileUrlFunction = function (tileCoord, opt_projection) {\n        var projection = opt_projection !== undefined ? opt_projection : this.getProjection();\n        var tileGrid = this.getTileGridForProjection(projection);\n        if (this.getWrapX() && projection.isGlobal()) {\n            tileCoord = wrapX(tileGrid, tileCoord, projection);\n        }\n        return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n    };\n    /**\n     * Remove all cached tiles from the source. The next render cycle will fetch new tiles.\n     * @api\n     */\n    TileSource.prototype.clear = function () {\n        this.tileCache.clear();\n    };\n    TileSource.prototype.refresh = function () {\n        this.clear();\n        _super.prototype.refresh.call(this);\n    };\n    /**\n     * Increases the cache size if needed\n     * @param {number} tileCount Minimum number of tiles needed.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     */\n    TileSource.prototype.updateCacheSize = function (tileCount, projection) {\n        var tileCache = this.getTileCacheForProjection(projection);\n        if (tileCount > tileCache.highWaterMark) {\n            tileCache.highWaterMark = tileCount;\n        }\n    };\n    /**\n     * Marks a tile coord as being used, without triggering a load.\n     * @abstract\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     */\n    TileSource.prototype.useTile = function (z, x, y, projection) { };\n    return TileSource;\n}(Source));\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\nvar TileSourceEvent = /** @class */ (function (_super) {\n    __extends(TileSourceEvent, _super);\n    /**\n     * @param {string} type Type.\n     * @param {import(\"../Tile.js\").default} tile The tile.\n     */\n    function TileSourceEvent(type, tile) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * The tile related to the event.\n         * @type {import(\"../Tile.js\").default}\n         * @api\n         */\n        _this.tile = tile;\n        return _this;\n    }\n    return TileSourceEvent;\n}(Event));\nexport { TileSourceEvent };\nexport default TileSource;\n//# sourceMappingURL=Tile.js.map"]},"metadata":{},"sourceType":"module"}