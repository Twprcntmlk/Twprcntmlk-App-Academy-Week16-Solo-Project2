{"ast":null,"code":"var _jsxFileName = \"/home/stephenchoung/aafolder/Week16/App-Academy-Week16-Solo-Project-Base/frontend/src/components/OpenLayerMap/map.js\",\n    _s = $RefreshSig$();\n\n// react\nimport React, { useState, useEffect, useRef } from 'react'; // openlayers\n\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport XYZ from 'ol/source/XYZ';\nimport { transform } from 'ol/proj';\nimport { toStringXY } from 'ol/coordinate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MapWrapper(props) {\n  _s();\n\n  // set intial state\n  const [map, setMap] = useState();\n  const [featuresLayer, setFeaturesLayer] = useState();\n  const [selectedCoord, setSelectedCoord] = useState(); // pull refs\n\n  const mapElement = useRef(); // create state ref that can be accessed in OpenLayers onclick callback function\n  //  https://stackoverflow.com/a/60643670\n\n  const mapRef = useRef();\n  mapRef.current = map; // initialize map on first render - logic formerly put into componentDidMount\n\n  useEffect(() => {\n    // create and add vector source layer\n    const initalFeaturesLayer = new VectorLayer({\n      source: new VectorSource()\n    }); // create map\n\n    const initialMap = new Map({\n      target: mapElement.current,\n      layers: [// USGS Topo\n      new TileLayer({\n        source: new XYZ({\n          url: 'https://basemap.nationalmap.gov/arcgis/rest/services/USGSTopo/MapServer/tile/{z}/{y}/{x}'\n        })\n      }), // Google Maps Terrain\n\n      /* new TileLayer({\n        source: new XYZ({\n          url: 'http://mt0.google.com/vt/lyrs=p&hl=en&x={x}&y={y}&z={z}',\n        })\n      }), */\n      initalFeaturesLayer],\n      view: new View({\n        projection: 'EPSG:3857',\n        center: [0, 0],\n        zoom: 2\n      }),\n      controls: []\n    }); // set map onclick handler\n\n    initialMap.on('click', handleMapClick); // save map and vector layer references to state\n\n    setMap(initialMap);\n    setFeaturesLayer(initalFeaturesLayer);\n  }, []); // update map if features prop changes - logic formerly put into componentDidUpdate\n\n  useEffect(() => {\n    if (props.features.length) {\n      // may be null on first render\n      // set features to map\n      featuresLayer.setSource(new VectorSource({\n        features: props.features // make sure features is an array\n\n      })); // fit map to feature extent (with 100px of padding)\n\n      map.getView().fit(featuresLayer.getSource().getExtent(), {\n        padding: [100, 100, 100, 100]\n      });\n    }\n  }, [props.features]); // map click handler\n\n  const handleMapClick = event => {\n    // get clicked coordinate using mapRef to access current React state inside OpenLayers callback\n    //  https://stackoverflow.com/a/60643670\n    const clickedCoord = mapRef.current.getCoordinateFromPixel(event.pixel); // transform coord to EPSG 4326 standard Lat Long\n\n    const transormedCoord = transform(clickedCoord, 'EPSG:3857', 'EPSG:4326'); // set React state\n\n    setSelectedCoord(transormedCoord);\n    console.log(transormedCoord);\n  }; // render component\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapElement,\n    className: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MapWrapper, \"eV1cisGnE6eMLyF15NCrqgthimw=\");\n\n_c = MapWrapper;\nexport default MapWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapWrapper\");","map":{"version":3,"sources":["/home/stephenchoung/aafolder/Week16/App-Academy-Week16-Solo-Project-Base/frontend/src/components/OpenLayerMap/map.js"],"names":["React","useState","useEffect","useRef","Map","View","TileLayer","VectorLayer","VectorSource","XYZ","transform","toStringXY","MapWrapper","props","map","setMap","featuresLayer","setFeaturesLayer","selectedCoord","setSelectedCoord","mapElement","mapRef","current","initalFeaturesLayer","source","initialMap","target","layers","url","view","projection","center","zoom","controls","on","handleMapClick","features","length","setSource","getView","fit","getSource","getExtent","padding","event","clickedCoord","getCoordinateFromPixel","pixel","transormedCoord","console","log"],"mappings":"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","sourcesContent":["// react\nimport React, { useState, useEffect, useRef } from 'react';\n\n// openlayers\nimport Map from 'ol/Map'\nimport View from 'ol/View'\nimport TileLayer from 'ol/layer/Tile'\nimport VectorLayer from 'ol/layer/Vector'\nimport VectorSource from 'ol/source/Vector'\nimport XYZ from 'ol/source/XYZ'\nimport {transform} from 'ol/proj'\nimport {toStringXY} from 'ol/coordinate';\n\nfunction MapWrapper(props) {\n\n  // set intial state\n  const [ map, setMap ] = useState()\n  const [ featuresLayer, setFeaturesLayer ] = useState()\n  const [ selectedCoord , setSelectedCoord ] = useState()\n\n  // pull refs\n  const mapElement = useRef()\n\n  // create state ref that can be accessed in OpenLayers onclick callback function\n  //  https://stackoverflow.com/a/60643670\n  const mapRef = useRef()\n  mapRef.current = map\n\n  // initialize map on first render - logic formerly put into componentDidMount\n  useEffect( () => {\n\n    // create and add vector source layer\n    const initalFeaturesLayer = new VectorLayer({\n      source: new VectorSource()\n    })\n\n    // create map\n    const initialMap = new Map({\n      target: mapElement.current,\n      layers: [\n\n        // USGS Topo\n        new TileLayer({\n          source: new XYZ({\n            url: 'https://basemap.nationalmap.gov/arcgis/rest/services/USGSTopo/MapServer/tile/{z}/{y}/{x}',\n          })\n        }),\n\n        // Google Maps Terrain\n        /* new TileLayer({\n          source: new XYZ({\n            url: 'http://mt0.google.com/vt/lyrs=p&hl=en&x={x}&y={y}&z={z}',\n          })\n        }), */\n\n        initalFeaturesLayer\n\n      ],\n      view: new View({\n        projection: 'EPSG:3857',\n        center: [0, 0],\n        zoom: 2\n      }),\n      controls: []\n    })\n\n    // set map onclick handler\n    initialMap.on('click', handleMapClick)\n\n    // save map and vector layer references to state\n    setMap(initialMap)\n    setFeaturesLayer(initalFeaturesLayer)\n\n  },[])\n\n  // update map if features prop changes - logic formerly put into componentDidUpdate\n  useEffect( () => {\n\n    if (props.features.length) { // may be null on first render\n\n      // set features to map\n      featuresLayer.setSource(\n        new VectorSource({\n          features: props.features // make sure features is an array\n        })\n      )\n\n      // fit map to feature extent (with 100px of padding)\n      map.getView().fit(featuresLayer.getSource().getExtent(), {\n        padding: [100,100,100,100]\n      })\n\n    }\n\n  },[props.features])\n\n  // map click handler\n  const handleMapClick = (event) => {\n\n    // get clicked coordinate using mapRef to access current React state inside OpenLayers callback\n    //  https://stackoverflow.com/a/60643670\n    const clickedCoord = mapRef.current.getCoordinateFromPixel(event.pixel);\n\n    // transform coord to EPSG 4326 standard Lat Long\n    const transormedCoord = transform(clickedCoord, 'EPSG:3857', 'EPSG:4326')\n\n    // set React state\n    setSelectedCoord( transormedCoord )\n\n    console.log(transormedCoord)\n\n  }\n\n  // render component\n  return (\n    <div ref={mapElement} className=\"map-container\"></div>\n  )\n\n}\n\nexport default MapWrapper\n"]},"metadata":{},"sourceType":"module"}