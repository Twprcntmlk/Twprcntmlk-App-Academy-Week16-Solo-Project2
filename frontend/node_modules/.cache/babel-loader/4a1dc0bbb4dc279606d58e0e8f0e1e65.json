{"ast":null,"code":"import { csrfFetch } from './csrf';\nconst LOAD = 'messages/LOAD';\nconst FIND_ONE = 'messages/FIND_ONE';\n\nconst load = messages => ({\n  type: LOAD,\n  messages\n});\n\nconst getOne = message => ({\n  type: FIND_ONE,\n  message\n}); //Get messages from database//////////////////////////////\n\n\nexport const getmessages = () => async dispatch => {\n  const res = await csrfFetch('/api/messages'); // problem is here?\n\n  if (res.ok) {\n    const messages = await res.json();\n    console.log(messages);\n    dispatch(load(messages));\n  }\n}; //Get Specific messages from database//I might not need this\n\nexport const findmessages = id => async dispatch => {\n  const res = await csrfFetch(`/api/messages/${id}`);\n\n  if (res.ok) {\n    const message = await res.json();\n    dispatch(getOne(message));\n  }\n}; //Edit messages from database//////////////////////////////\n\nexport const editlistings = message => async dispatch => {\n  const res = await csrfFetch(`/api/messages/${message.id}`, {\n    method: \"PUT\",\n    body: JSON.stringify(message)\n  });\n\n  if (res.ok) {\n    const listingId = await res.json();\n    dispatch(findmessages(listingId));\n  }\n};\n\nconst messagesReducer = (state = {}, action) => {\n  switch (action.type) {\n    case LOAD:\n      {\n        const allmessages = {};\n        action.messages.forEach(message => {\n          allmessages[message.id] = message;\n        });\n        return allmessages;\n      }\n\n    case FIND_ONE:\n      return { ...action.message\n      };\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nexport default messagesReducer;","map":{"version":3,"sources":["/home/stephenchoung/aafolder/Week16/App-Academy-Week16-Solo-Project-Base/frontend/src/store/message.js"],"names":["csrfFetch","LOAD","FIND_ONE","load","messages","type","getOne","message","getmessages","dispatch","res","ok","json","console","log","findmessages","id","editlistings","method","body","JSON","stringify","listingId","messagesReducer","state","action","allmessages","forEach"],"mappings":"AAAA,SAASA,SAAT,QAA0B,QAA1B;AAEA,MAAMC,IAAI,GAAG,eAAb;AACA,MAAMC,QAAQ,GAAG,mBAAjB;;AAGA,MAAMC,IAAI,GAAGC,QAAQ,KAAK;AACxBC,EAAAA,IAAI,EAAEJ,IADkB;AAExBG,EAAAA;AAFwB,CAAL,CAArB;;AAKA,MAAME,MAAM,GAAGC,OAAO,KAAK;AACvBF,EAAAA,IAAI,EAAEH,QADiB;AAEvBK,EAAAA;AAFuB,CAAL,CAAtB,C,CAKA;;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAMC,QAAN,IAAkB;AACnD,QAAMC,GAAG,GAAG,MAAMV,SAAS,CAAC,eAAD,CAA3B,CADmD,CACL;;AAC9C,MAAIU,GAAG,CAACC,EAAR,EAAY;AACR,UAAMP,QAAQ,GAAG,MAAMM,GAAG,CAACE,IAAJ,EAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AACAK,IAAAA,QAAQ,CAACN,IAAI,CAACC,QAAD,CAAL,CAAR;AACC;AACJ,CAPM,C,CASP;;AACA,OAAO,MAAMW,YAAY,GAAIC,EAAD,IAAQ,MAAMP,QAAN,IAAkB;AACtD,QAAMC,GAAG,GAAG,MAAMV,SAAS,CAAE,iBAAgBgB,EAAG,EAArB,CAA3B;;AAEA,MAAIN,GAAG,CAACC,EAAR,EAAY;AACR,UAAMJ,OAAO,GAAG,MAAMG,GAAG,CAACE,IAAJ,EAAtB;AACAH,IAAAA,QAAQ,CAACH,MAAM,CAACC,OAAD,CAAP,CAAR;AACH;AACA,CAPM,C,CAQP;;AACA,OAAO,MAAMU,YAAY,GAAIV,OAAD,IAAa,MAAME,QAAN,IAAkB;AACvD,QAAMC,GAAG,GAAG,MAAMV,SAAS,CAAE,iBAAgBO,OAAO,CAACS,EAAG,EAA7B,EAAgC;AAC/CE,IAAAA,MAAM,EAAE,KADuC;AAE/CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAed,OAAf;AAFyC,GAAhC,CAA3B;;AAKA,MAAIG,GAAG,CAACC,EAAR,EAAY;AACR,UAAMW,SAAS,GAAG,MAAMZ,GAAG,CAACE,IAAJ,EAAxB;AACAH,IAAAA,QAAQ,CAACM,YAAY,CAACO,SAAD,CAAb,CAAR;AACH;AACA,CAVE;;AAaP,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAChD,UAAOA,MAAM,CAACpB,IAAd;AACI,SAAKJ,IAAL;AAAU;AACN,cAAMyB,WAAW,GAAG,EAApB;AACAD,QAAAA,MAAM,CAACrB,QAAP,CAAgBuB,OAAhB,CAAwBpB,OAAO,IAAI;AAC/BmB,UAAAA,WAAW,CAACnB,OAAO,CAACS,EAAT,CAAX,GAA0BT,OAA1B;AACH,SAFD;AAGA,eAAOmB,WAAP;AACH;;AAED,SAAKxB,QAAL;AACI,aAAO,EAAC,GAAGuB,MAAM,CAAClB;AAAX,OAAP;;AACJ;AACI,aAAOiB,KAAP;AAZR;;AAaC;AAEA,CAhBD;;AAkBA,eAAeD,eAAf","sourcesContent":["import { csrfFetch } from './csrf';\n\nconst LOAD = 'messages/LOAD';\nconst FIND_ONE = 'messages/FIND_ONE';\n\n\nconst load = messages => ({\n  type: LOAD,\n  messages\n});\n\nconst getOne = message => ({\n    type: FIND_ONE,\n    message\n  });\n\n//Get messages from database//////////////////////////////\nexport const getmessages = () => async dispatch => {\nconst res = await csrfFetch('/api/messages'); // problem is here?\nif (res.ok) {\n    const messages = await res.json();\n    console.log(messages)\n    dispatch(load(messages));\n    }\n}\n\n//Get Specific messages from database//I might not need this\nexport const findmessages = (id) => async dispatch => {\nconst res = await csrfFetch(`/api/messages/${id}`);\n\nif (res.ok) {\n    const message = await res.json();\n    dispatch(getOne(message));\n}\n};\n//Edit messages from database//////////////////////////////\nexport const editlistings = (message) => async dispatch => {\n    const res = await csrfFetch(`/api/messages/${message.id}`, {\n                method: \"PUT\",\n                body: JSON.stringify(message),\n            });\n\n    if (res.ok) {\n        const listingId = await res.json();\n        dispatch(findmessages(listingId));\n    }\n    };\n\n\nconst messagesReducer = (state = {}, action) => {\nswitch(action.type) {\n    case LOAD:{\n        const allmessages = {};\n        action.messages.forEach(message => {\n            allmessages[message.id] = message;\n        });\n        return allmessages\n    }\n\n    case FIND_ONE:\n        return {...action.message}\n    default:\n        return state;\n};\n\n}\n\nexport default messagesReducer;\n"]},"metadata":{},"sourceType":"module"}