{"ast":null,"code":"/**\n * @module ol/reproj/Triangulation\n */\nimport { boundingExtent, createEmpty, extendCoordinate, getArea, getBottomLeft, getBottomRight, getTopLeft, getTopRight, getWidth, intersects } from '../extent.js';\nimport { getTransform } from '../proj.js';\nimport { log2, modulo } from '../math.js';\n/**\n * Single triangle; consists of 3 source points and 3 target points.\n * @typedef {Object} Triangle\n * @property {Array<import(\"../coordinate.js\").Coordinate>} source\n * @property {Array<import(\"../coordinate.js\").Coordinate>} target\n */\n\n/**\n * Maximum number of subdivision steps during raster reprojection triangulation.\n * Prevents high memory usage and large number of proj4 calls (for certain\n * transformations and areas). At most `2*(2^this)` triangles are created for\n * each triangulated extent (tile/image).\n * @type {number}\n */\n\nvar MAX_SUBDIVISION = 10;\n/**\n * Maximum allowed size of triangle relative to world width. When transforming\n * corners of world extent between certain projections, the resulting\n * triangulation seems to have zero error and no subdivision is performed. If\n * the triangle width is more than this (relative to world width; 0-1),\n * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.\n * @type {number}\n */\n\nvar MAX_TRIANGLE_WIDTH = 0.25;\n/**\n * @classdesc\n * Class containing triangulation of the given target extent.\n * Used for determining source data and the reprojection itself.\n */\n\nvar Triangulation =\n/** @class */\nfunction () {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent to triangulate.\n   * @param {import(\"../extent.js\").Extent} maxSourceExtent Maximal source extent that can be used.\n   * @param {number} errorThreshold Acceptable error (in source units).\n   * @param {?number} opt_destinationResolution The (optional) resolution of the destination.\n   */\n  function Triangulation(sourceProj, targetProj, targetExtent, maxSourceExtent, errorThreshold, opt_destinationResolution) {\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     * @private\n     */\n    this.sourceProj_ = sourceProj;\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     * @private\n     */\n\n    this.targetProj_ = targetProj;\n    /** @type {!Object<string, import(\"../coordinate.js\").Coordinate>} */\n\n    var transformInvCache = {};\n    var transformInv = getTransform(this.targetProj_, this.sourceProj_);\n    /**\n     * @param {import(\"../coordinate.js\").Coordinate} c A coordinate.\n     * @return {import(\"../coordinate.js\").Coordinate} Transformed coordinate.\n     * @private\n     */\n\n    this.transformInv_ = function (c) {\n      var key = c[0] + '/' + c[1];\n\n      if (!transformInvCache[key]) {\n        transformInvCache[key] = transformInv(c);\n      }\n\n      return transformInvCache[key];\n    };\n    /**\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */\n\n\n    this.maxSourceExtent_ = maxSourceExtent;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.errorThresholdSquared_ = errorThreshold * errorThreshold;\n    /**\n     * @type {Array<Triangle>}\n     * @private\n     */\n\n    this.triangles_ = [];\n    /**\n     * Indicates that the triangulation crosses edge of the source projection.\n     * @type {boolean}\n     * @private\n     */\n\n    this.wrapsXInSource_ = false;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.canWrapXInSource_ = this.sourceProj_.canWrapX() && !!maxSourceExtent && !!this.sourceProj_.getExtent() && getWidth(maxSourceExtent) == getWidth(this.sourceProj_.getExtent());\n    /**\n     * @type {?number}\n     * @private\n     */\n\n    this.sourceWorldWidth_ = this.sourceProj_.getExtent() ? getWidth(this.sourceProj_.getExtent()) : null;\n    /**\n     * @type {?number}\n     * @private\n     */\n\n    this.targetWorldWidth_ = this.targetProj_.getExtent() ? getWidth(this.targetProj_.getExtent()) : null;\n    var destinationTopLeft = getTopLeft(targetExtent);\n    var destinationTopRight = getTopRight(targetExtent);\n    var destinationBottomRight = getBottomRight(targetExtent);\n    var destinationBottomLeft = getBottomLeft(targetExtent);\n    var sourceTopLeft = this.transformInv_(destinationTopLeft);\n    var sourceTopRight = this.transformInv_(destinationTopRight);\n    var sourceBottomRight = this.transformInv_(destinationBottomRight);\n    var sourceBottomLeft = this.transformInv_(destinationBottomLeft);\n    /*\n     * The maxSubdivision controls how many splittings of the target area can\n     * be done. The idea here is to do a linear mapping of the target areas\n     * but the actual overal reprojection (can be) extremely non-linear. The\n     * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256\n     * tile size. However this function is also called to remap canvas rendered\n     * layers which can be much larger. This calculation increases the maxSubdivision\n     * value by the right factor so that each 256x256 pixel area has\n     * MAX_SUBDIVISION divisions.\n     */\n\n    var maxSubdivision = MAX_SUBDIVISION + (opt_destinationResolution ? Math.max(0, Math.ceil(log2(getArea(targetExtent) / (opt_destinationResolution * opt_destinationResolution * 256 * 256)))) : 0);\n    this.addQuad_(destinationTopLeft, destinationTopRight, destinationBottomRight, destinationBottomLeft, sourceTopLeft, sourceTopRight, sourceBottomRight, sourceBottomLeft, maxSubdivision);\n\n    if (this.wrapsXInSource_) {\n      var leftBound_1 = Infinity;\n      this.triangles_.forEach(function (triangle, i, arr) {\n        leftBound_1 = Math.min(leftBound_1, triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]);\n      }); // Shift triangles to be as close to `leftBound` as possible\n      // (if the distance is more than `worldWidth / 2` it can be closer.\n\n      this.triangles_.forEach(function (triangle) {\n        if (Math.max(triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]) - leftBound_1 > this.sourceWorldWidth_ / 2) {\n          var newTriangle = [[triangle.source[0][0], triangle.source[0][1]], [triangle.source[1][0], triangle.source[1][1]], [triangle.source[2][0], triangle.source[2][1]]];\n\n          if (newTriangle[0][0] - leftBound_1 > this.sourceWorldWidth_ / 2) {\n            newTriangle[0][0] -= this.sourceWorldWidth_;\n          }\n\n          if (newTriangle[1][0] - leftBound_1 > this.sourceWorldWidth_ / 2) {\n            newTriangle[1][0] -= this.sourceWorldWidth_;\n          }\n\n          if (newTriangle[2][0] - leftBound_1 > this.sourceWorldWidth_ / 2) {\n            newTriangle[2][0] -= this.sourceWorldWidth_;\n          } // Rarely (if the extent contains both the dateline and prime meridian)\n          // the shift can in turn break some triangles.\n          // Detect this here and don't shift in such cases.\n\n\n          var minX = Math.min(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);\n          var maxX = Math.max(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);\n\n          if (maxX - minX < this.sourceWorldWidth_ / 2) {\n            triangle.source = newTriangle;\n          }\n        }\n      }.bind(this));\n    }\n\n    transformInvCache = {};\n  }\n  /**\n   * Adds triangle to the triangulation.\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n   * @private\n   */\n\n\n  Triangulation.prototype.addTriangle_ = function (a, b, c, aSrc, bSrc, cSrc) {\n    this.triangles_.push({\n      source: [aSrc, bSrc, cSrc],\n      target: [a, b, c]\n    });\n  };\n  /**\n   * Adds quad (points in clock-wise order) to the triangulation\n   * (and reprojects the vertices) if valid.\n   * Performs quad subdivision if needed to increase precision.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} d The target d coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} dSrc The source d coordinate.\n   * @param {number} maxSubdivision Maximal allowed subdivision of the quad.\n   * @private\n   */\n\n\n  Triangulation.prototype.addQuad_ = function (a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {\n    var sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);\n    var sourceCoverageX = this.sourceWorldWidth_ ? getWidth(sourceQuadExtent) / this.sourceWorldWidth_ : null;\n    var sourceWorldWidth =\n    /** @type {number} */\n    this.sourceWorldWidth_; // when the quad is wrapped in the source projection\n    // it covers most of the projection extent, but not fully\n\n    var wrapsX = this.sourceProj_.canWrapX() && sourceCoverageX > 0.5 && sourceCoverageX < 1;\n    var needsSubdivision = false;\n\n    if (maxSubdivision > 0) {\n      if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {\n        var targetQuadExtent = boundingExtent([a, b, c, d]);\n        var targetCoverageX = getWidth(targetQuadExtent) / this.targetWorldWidth_;\n        needsSubdivision = targetCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\n      }\n\n      if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {\n        needsSubdivision = sourceCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\n      }\n    }\n\n    if (!needsSubdivision && this.maxSourceExtent_) {\n      if (isFinite(sourceQuadExtent[0]) && isFinite(sourceQuadExtent[1]) && isFinite(sourceQuadExtent[2]) && isFinite(sourceQuadExtent[3])) {\n        if (!intersects(sourceQuadExtent, this.maxSourceExtent_)) {\n          // whole quad outside source projection extent -> ignore\n          return;\n        }\n      }\n    }\n\n    var isNotFinite = 0;\n\n    if (!needsSubdivision) {\n      if (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) || !isFinite(bSrc[0]) || !isFinite(bSrc[1]) || !isFinite(cSrc[0]) || !isFinite(cSrc[1]) || !isFinite(dSrc[0]) || !isFinite(dSrc[1])) {\n        if (maxSubdivision > 0) {\n          needsSubdivision = true;\n        } else {\n          // It might be the case that only 1 of the points is infinite. In this case\n          // we can draw a single triangle with the other three points\n          isNotFinite = (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) + (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) + (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) + (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);\n\n          if (isNotFinite != 1 && isNotFinite != 2 && isNotFinite != 4 && isNotFinite != 8) {\n            return;\n          }\n        }\n      }\n    }\n\n    if (maxSubdivision > 0) {\n      if (!needsSubdivision) {\n        var center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];\n        var centerSrc = this.transformInv_(center);\n        var dx = void 0;\n\n        if (wrapsX) {\n          var centerSrcEstimX = (modulo(aSrc[0], sourceWorldWidth) + modulo(cSrc[0], sourceWorldWidth)) / 2;\n          dx = centerSrcEstimX - modulo(centerSrc[0], sourceWorldWidth);\n        } else {\n          dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];\n        }\n\n        var dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];\n        var centerSrcErrorSquared = dx * dx + dy * dy;\n        needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;\n      }\n\n      if (needsSubdivision) {\n        if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {\n          // split horizontally (top & bottom)\n          var bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];\n          var bcSrc = this.transformInv_(bc);\n          var da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];\n          var daSrc = this.transformInv_(da);\n          this.addQuad_(a, b, bc, da, aSrc, bSrc, bcSrc, daSrc, maxSubdivision - 1);\n          this.addQuad_(da, bc, c, d, daSrc, bcSrc, cSrc, dSrc, maxSubdivision - 1);\n        } else {\n          // split vertically (left & right)\n          var ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];\n          var abSrc = this.transformInv_(ab);\n          var cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];\n          var cdSrc = this.transformInv_(cd);\n          this.addQuad_(a, ab, cd, d, aSrc, abSrc, cdSrc, dSrc, maxSubdivision - 1);\n          this.addQuad_(ab, b, c, cd, abSrc, bSrc, cSrc, cdSrc, maxSubdivision - 1);\n        }\n\n        return;\n      }\n    }\n\n    if (wrapsX) {\n      if (!this.canWrapXInSource_) {\n        return;\n      }\n\n      this.wrapsXInSource_ = true;\n    } // Exactly zero or one of *Src is not finite\n    // The triangles must have the diagonal line as the first side\n    // This is to allow easy code in reproj.s to make it straight for broken\n    // browsers that can't handle diagonal clipping\n\n\n    if ((isNotFinite & 0xb) == 0) {\n      this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);\n    }\n\n    if ((isNotFinite & 0xe) == 0) {\n      this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);\n    }\n\n    if (isNotFinite) {\n      // Try the other two triangles\n      if ((isNotFinite & 0xd) == 0) {\n        this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);\n      }\n\n      if ((isNotFinite & 0x7) == 0) {\n        this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);\n      }\n    }\n  };\n  /**\n   * Calculates extent of the 'source' coordinates from all the triangles.\n   *\n   * @return {import(\"../extent.js\").Extent} Calculated extent.\n   */\n\n\n  Triangulation.prototype.calculateSourceExtent = function () {\n    var extent = createEmpty();\n    this.triangles_.forEach(function (triangle, i, arr) {\n      var src = triangle.source;\n      extendCoordinate(extent, src[0]);\n      extendCoordinate(extent, src[1]);\n      extendCoordinate(extent, src[2]);\n    });\n    return extent;\n  };\n  /**\n   * @return {Array<Triangle>} Array of the calculated triangles.\n   */\n\n\n  Triangulation.prototype.getTriangles = function () {\n    return this.triangles_;\n  };\n\n  return Triangulation;\n}();\n\nexport default Triangulation;","map":{"version":3,"sources":["../src/reproj/Triangulation.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/reproj/Triangulation\n */\nimport { boundingExtent, createEmpty, extendCoordinate, getArea, getBottomLeft, getBottomRight, getTopLeft, getTopRight, getWidth, intersects, } from '../extent.js';\nimport { getTransform } from '../proj.js';\nimport { log2, modulo } from '../math.js';\n/**\n * Single triangle; consists of 3 source points and 3 target points.\n * @typedef {Object} Triangle\n * @property {Array<import(\"../coordinate.js\").Coordinate>} source\n * @property {Array<import(\"../coordinate.js\").Coordinate>} target\n */\n/**\n * Maximum number of subdivision steps during raster reprojection triangulation.\n * Prevents high memory usage and large number of proj4 calls (for certain\n * transformations and areas). At most `2*(2^this)` triangles are created for\n * each triangulated extent (tile/image).\n * @type {number}\n */\nvar MAX_SUBDIVISION = 10;\n/**\n * Maximum allowed size of triangle relative to world width. When transforming\n * corners of world extent between certain projections, the resulting\n * triangulation seems to have zero error and no subdivision is performed. If\n * the triangle width is more than this (relative to world width; 0-1),\n * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.\n * @type {number}\n */\nvar MAX_TRIANGLE_WIDTH = 0.25;\n/**\n * @classdesc\n * Class containing triangulation of the given target extent.\n * Used for determining source data and the reprojection itself.\n */\nvar Triangulation = /** @class */ (function () {\n    /**\n     * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n     * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n     * @param {import(\"../extent.js\").Extent} targetExtent Target extent to triangulate.\n     * @param {import(\"../extent.js\").Extent} maxSourceExtent Maximal source extent that can be used.\n     * @param {number} errorThreshold Acceptable error (in source units).\n     * @param {?number} opt_destinationResolution The (optional) resolution of the destination.\n     */\n    function Triangulation(sourceProj, targetProj, targetExtent, maxSourceExtent, errorThreshold, opt_destinationResolution) {\n        /**\n         * @type {import(\"../proj/Projection.js\").default}\n         * @private\n         */\n        this.sourceProj_ = sourceProj;\n        /**\n         * @type {import(\"../proj/Projection.js\").default}\n         * @private\n         */\n        this.targetProj_ = targetProj;\n        /** @type {!Object<string, import(\"../coordinate.js\").Coordinate>} */\n        var transformInvCache = {};\n        var transformInv = getTransform(this.targetProj_, this.sourceProj_);\n        /**\n         * @param {import(\"../coordinate.js\").Coordinate} c A coordinate.\n         * @return {import(\"../coordinate.js\").Coordinate} Transformed coordinate.\n         * @private\n         */\n        this.transformInv_ = function (c) {\n            var key = c[0] + '/' + c[1];\n            if (!transformInvCache[key]) {\n                transformInvCache[key] = transformInv(c);\n            }\n            return transformInvCache[key];\n        };\n        /**\n         * @type {import(\"../extent.js\").Extent}\n         * @private\n         */\n        this.maxSourceExtent_ = maxSourceExtent;\n        /**\n         * @type {number}\n         * @private\n         */\n        this.errorThresholdSquared_ = errorThreshold * errorThreshold;\n        /**\n         * @type {Array<Triangle>}\n         * @private\n         */\n        this.triangles_ = [];\n        /**\n         * Indicates that the triangulation crosses edge of the source projection.\n         * @type {boolean}\n         * @private\n         */\n        this.wrapsXInSource_ = false;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this.canWrapXInSource_ =\n            this.sourceProj_.canWrapX() &&\n                !!maxSourceExtent &&\n                !!this.sourceProj_.getExtent() &&\n                getWidth(maxSourceExtent) == getWidth(this.sourceProj_.getExtent());\n        /**\n         * @type {?number}\n         * @private\n         */\n        this.sourceWorldWidth_ = this.sourceProj_.getExtent()\n            ? getWidth(this.sourceProj_.getExtent())\n            : null;\n        /**\n         * @type {?number}\n         * @private\n         */\n        this.targetWorldWidth_ = this.targetProj_.getExtent()\n            ? getWidth(this.targetProj_.getExtent())\n            : null;\n        var destinationTopLeft = getTopLeft(targetExtent);\n        var destinationTopRight = getTopRight(targetExtent);\n        var destinationBottomRight = getBottomRight(targetExtent);\n        var destinationBottomLeft = getBottomLeft(targetExtent);\n        var sourceTopLeft = this.transformInv_(destinationTopLeft);\n        var sourceTopRight = this.transformInv_(destinationTopRight);\n        var sourceBottomRight = this.transformInv_(destinationBottomRight);\n        var sourceBottomLeft = this.transformInv_(destinationBottomLeft);\n        /*\n         * The maxSubdivision controls how many splittings of the target area can\n         * be done. The idea here is to do a linear mapping of the target areas\n         * but the actual overal reprojection (can be) extremely non-linear. The\n         * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256\n         * tile size. However this function is also called to remap canvas rendered\n         * layers which can be much larger. This calculation increases the maxSubdivision\n         * value by the right factor so that each 256x256 pixel area has\n         * MAX_SUBDIVISION divisions.\n         */\n        var maxSubdivision = MAX_SUBDIVISION +\n            (opt_destinationResolution\n                ? Math.max(0, Math.ceil(log2(getArea(targetExtent) /\n                    (opt_destinationResolution *\n                        opt_destinationResolution *\n                        256 *\n                        256))))\n                : 0);\n        this.addQuad_(destinationTopLeft, destinationTopRight, destinationBottomRight, destinationBottomLeft, sourceTopLeft, sourceTopRight, sourceBottomRight, sourceBottomLeft, maxSubdivision);\n        if (this.wrapsXInSource_) {\n            var leftBound_1 = Infinity;\n            this.triangles_.forEach(function (triangle, i, arr) {\n                leftBound_1 = Math.min(leftBound_1, triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]);\n            });\n            // Shift triangles to be as close to `leftBound` as possible\n            // (if the distance is more than `worldWidth / 2` it can be closer.\n            this.triangles_.forEach(function (triangle) {\n                if (Math.max(triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]) -\n                    leftBound_1 >\n                    this.sourceWorldWidth_ / 2) {\n                    var newTriangle = [\n                        [triangle.source[0][0], triangle.source[0][1]],\n                        [triangle.source[1][0], triangle.source[1][1]],\n                        [triangle.source[2][0], triangle.source[2][1]],\n                    ];\n                    if (newTriangle[0][0] - leftBound_1 > this.sourceWorldWidth_ / 2) {\n                        newTriangle[0][0] -= this.sourceWorldWidth_;\n                    }\n                    if (newTriangle[1][0] - leftBound_1 > this.sourceWorldWidth_ / 2) {\n                        newTriangle[1][0] -= this.sourceWorldWidth_;\n                    }\n                    if (newTriangle[2][0] - leftBound_1 > this.sourceWorldWidth_ / 2) {\n                        newTriangle[2][0] -= this.sourceWorldWidth_;\n                    }\n                    // Rarely (if the extent contains both the dateline and prime meridian)\n                    // the shift can in turn break some triangles.\n                    // Detect this here and don't shift in such cases.\n                    var minX = Math.min(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);\n                    var maxX = Math.max(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);\n                    if (maxX - minX < this.sourceWorldWidth_ / 2) {\n                        triangle.source = newTriangle;\n                    }\n                }\n            }.bind(this));\n        }\n        transformInvCache = {};\n    }\n    /**\n     * Adds triangle to the triangulation.\n     * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n     * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n     * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n     * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n     * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n     * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n     * @private\n     */\n    Triangulation.prototype.addTriangle_ = function (a, b, c, aSrc, bSrc, cSrc) {\n        this.triangles_.push({\n            source: [aSrc, bSrc, cSrc],\n            target: [a, b, c],\n        });\n    };\n    /**\n     * Adds quad (points in clock-wise order) to the triangulation\n     * (and reprojects the vertices) if valid.\n     * Performs quad subdivision if needed to increase precision.\n     *\n     * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n     * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n     * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n     * @param {import(\"../coordinate.js\").Coordinate} d The target d coordinate.\n     * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n     * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n     * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n     * @param {import(\"../coordinate.js\").Coordinate} dSrc The source d coordinate.\n     * @param {number} maxSubdivision Maximal allowed subdivision of the quad.\n     * @private\n     */\n    Triangulation.prototype.addQuad_ = function (a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {\n        var sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);\n        var sourceCoverageX = this.sourceWorldWidth_\n            ? getWidth(sourceQuadExtent) / this.sourceWorldWidth_\n            : null;\n        var sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);\n        // when the quad is wrapped in the source projection\n        // it covers most of the projection extent, but not fully\n        var wrapsX = this.sourceProj_.canWrapX() &&\n            sourceCoverageX > 0.5 &&\n            sourceCoverageX < 1;\n        var needsSubdivision = false;\n        if (maxSubdivision > 0) {\n            if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {\n                var targetQuadExtent = boundingExtent([a, b, c, d]);\n                var targetCoverageX = getWidth(targetQuadExtent) / this.targetWorldWidth_;\n                needsSubdivision =\n                    targetCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\n            }\n            if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {\n                needsSubdivision =\n                    sourceCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\n            }\n        }\n        if (!needsSubdivision && this.maxSourceExtent_) {\n            if (isFinite(sourceQuadExtent[0]) &&\n                isFinite(sourceQuadExtent[1]) &&\n                isFinite(sourceQuadExtent[2]) &&\n                isFinite(sourceQuadExtent[3])) {\n                if (!intersects(sourceQuadExtent, this.maxSourceExtent_)) {\n                    // whole quad outside source projection extent -> ignore\n                    return;\n                }\n            }\n        }\n        var isNotFinite = 0;\n        if (!needsSubdivision) {\n            if (!isFinite(aSrc[0]) ||\n                !isFinite(aSrc[1]) ||\n                !isFinite(bSrc[0]) ||\n                !isFinite(bSrc[1]) ||\n                !isFinite(cSrc[0]) ||\n                !isFinite(cSrc[1]) ||\n                !isFinite(dSrc[0]) ||\n                !isFinite(dSrc[1])) {\n                if (maxSubdivision > 0) {\n                    needsSubdivision = true;\n                }\n                else {\n                    // It might be the case that only 1 of the points is infinite. In this case\n                    // we can draw a single triangle with the other three points\n                    isNotFinite =\n                        (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) +\n                            (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) +\n                            (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) +\n                            (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);\n                    if (isNotFinite != 1 &&\n                        isNotFinite != 2 &&\n                        isNotFinite != 4 &&\n                        isNotFinite != 8) {\n                        return;\n                    }\n                }\n            }\n        }\n        if (maxSubdivision > 0) {\n            if (!needsSubdivision) {\n                var center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];\n                var centerSrc = this.transformInv_(center);\n                var dx = void 0;\n                if (wrapsX) {\n                    var centerSrcEstimX = (modulo(aSrc[0], sourceWorldWidth) +\n                        modulo(cSrc[0], sourceWorldWidth)) /\n                        2;\n                    dx = centerSrcEstimX - modulo(centerSrc[0], sourceWorldWidth);\n                }\n                else {\n                    dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];\n                }\n                var dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];\n                var centerSrcErrorSquared = dx * dx + dy * dy;\n                needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;\n            }\n            if (needsSubdivision) {\n                if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {\n                    // split horizontally (top & bottom)\n                    var bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];\n                    var bcSrc = this.transformInv_(bc);\n                    var da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];\n                    var daSrc = this.transformInv_(da);\n                    this.addQuad_(a, b, bc, da, aSrc, bSrc, bcSrc, daSrc, maxSubdivision - 1);\n                    this.addQuad_(da, bc, c, d, daSrc, bcSrc, cSrc, dSrc, maxSubdivision - 1);\n                }\n                else {\n                    // split vertically (left & right)\n                    var ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];\n                    var abSrc = this.transformInv_(ab);\n                    var cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];\n                    var cdSrc = this.transformInv_(cd);\n                    this.addQuad_(a, ab, cd, d, aSrc, abSrc, cdSrc, dSrc, maxSubdivision - 1);\n                    this.addQuad_(ab, b, c, cd, abSrc, bSrc, cSrc, cdSrc, maxSubdivision - 1);\n                }\n                return;\n            }\n        }\n        if (wrapsX) {\n            if (!this.canWrapXInSource_) {\n                return;\n            }\n            this.wrapsXInSource_ = true;\n        }\n        // Exactly zero or one of *Src is not finite\n        // The triangles must have the diagonal line as the first side\n        // This is to allow easy code in reproj.s to make it straight for broken\n        // browsers that can't handle diagonal clipping\n        if ((isNotFinite & 0xb) == 0) {\n            this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);\n        }\n        if ((isNotFinite & 0xe) == 0) {\n            this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);\n        }\n        if (isNotFinite) {\n            // Try the other two triangles\n            if ((isNotFinite & 0xd) == 0) {\n                this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);\n            }\n            if ((isNotFinite & 0x7) == 0) {\n                this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);\n            }\n        }\n    };\n    /**\n     * Calculates extent of the 'source' coordinates from all the triangles.\n     *\n     * @return {import(\"../extent.js\").Extent} Calculated extent.\n     */\n    Triangulation.prototype.calculateSourceExtent = function () {\n        var extent = createEmpty();\n        this.triangles_.forEach(function (triangle, i, arr) {\n            var src = triangle.source;\n            extendCoordinate(extent, src[0]);\n            extendCoordinate(extent, src[1]);\n            extendCoordinate(extent, src[2]);\n        });\n        return extent;\n    };\n    /**\n     * @return {Array<Triangle>} Array of the calculated triangles.\n     */\n    Triangulation.prototype.getTriangles = function () {\n        return this.triangles_;\n    };\n    return Triangulation;\n}());\nexport default Triangulation;\n//# sourceMappingURL=Triangulation.js.map"]},"metadata":{},"sourceType":"module"}