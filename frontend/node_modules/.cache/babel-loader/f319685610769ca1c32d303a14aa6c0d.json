{"ast":null,"code":"var _jsxFileName = \"/home/stephenchoung/aafolder/Week16/App-Academy-Week16-Solo-Project-Base/frontend/src/components/GoogleMapApi/GoogleMapApi.js\";\nimport React, { Component } from 'react';\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport './GoogleMapApi.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MapContainer = props => {\n  //This stores the person current location to be used for initial render\n  let centered = props.coord1; //Logic to get center of pickoff and drop off point, to enable both points to be displayed on the screen\n\n  if (props.coord1 && props.coord2) {\n    const latt = (props.coord1.lat + props.coord2.lat) / 2;\n    const lngg = (props.coord1.lng + props.coord2.lng) / 2;\n    centered = {\n      lat: latt,\n      lng: lngg\n    };\n  }\n\n  return (\n    /*#__PURE__*/\n    //Map Render function, used the google-maps-react package to help ease workload.\n    _jsxDEV(Map, {\n      google: props.google,\n      zoom: 11,\n      initialCenter: centered,\n      center: centered,\n      children: [/*#__PURE__*/_jsxDEV(Polyline, {\n        path: [props.coord1, props.coord2],\n        strokeColor: \"#0000FF\",\n        strokeOpacity: 0.8,\n        strokeWeight: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        name: 'Pickup Location',\n        position: props.coord1,\n        id: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        name: 'Dropoff Location',\n        position: props.coord2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 6\n    }, this)\n  );\n};\n\n_c = MapContainer;\nexport default GoogleApiWrapper({\n  apiKey: ['API_KEY_HERE']\n})(MapContainer); // export class MapContainer extends Component {\n//     state = {\n//       showingInfoWindow: false,\n//       activeMarker: {}\n//       selectedPlace: {},\n//     };\n//     onMarkerClick = (props, marker, e) =>\n//       this.setState({\n//         selectedPlace: props,\n//         activeMarker: marker,\n//         showingInfoWindow: true\n//       });\n//     onMapClicked = (props) => {\n//       if (this.state.showingInfoWindow) {\n//         this.setState({\n//           showingInfoWindow: false,\n//           activeMarker: null\n//         })\n//       }\n//     };\n//     render() {\n//       return (\n//         <div className='GoogleMap'>\n//             <Map google={this.props.google}\n//                 onClick={this.onMapClicked}>\n//             <Marker onClick={this.onMarkerClick}\n//                     name={'Current location'} />\n//             </Map>\n//         </div>\n//       )\n//     }\n//   }\n// export default GoogleApiWrapper({\n//   apiKey: ('AIzaSyBpfbp2b1e6kzv8_A1yrUGO3eVt20eFSNA')\n// })(MapContainer)\n\nvar _c;\n\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"sources":["/home/stephenchoung/aafolder/Week16/App-Academy-Week16-Solo-Project-Base/frontend/src/components/GoogleMapApi/GoogleMapApi.js"],"names":["React","Component","Map","InfoWindow","Marker","GoogleApiWrapper","MapContainer","props","centered","coord1","coord2","latt","lat","lngg","lng","google","apiKey"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAkC,OAAlC;AACA,SAAQC,GAAR,EAAaC,UAAb,EAAyBC,MAAzB,EAAiCC,gBAAjC,QAAwD,mBAAxD;AACA,OAAO,oBAAP;;;AAGA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAG5B;AACA,MAAIC,QAAQ,GAAGD,KAAK,CAACE,MAArB,CAJ4B,CAM5B;;AACA,MAAIF,KAAK,CAACE,MAAN,IAAgBF,KAAK,CAACG,MAA1B,EAAkC;AAC/B,UAAMC,IAAI,GAAG,CAACJ,KAAK,CAACE,MAAN,CAAaG,GAAb,GAAmBL,KAAK,CAACG,MAAN,CAAaE,GAAjC,IAAwC,CAArD;AACA,UAAMC,IAAI,GAAG,CAACN,KAAK,CAACE,MAAN,CAAaK,GAAb,GAAmBP,KAAK,CAACG,MAAN,CAAaI,GAAjC,IAAwC,CAArD;AAEAN,IAAAA,QAAQ,GAAG;AAAEI,MAAAA,GAAG,EAAED,IAAP;AAAaG,MAAAA,GAAG,EAAED;AAAlB,KAAX;AACF;;AAED;AAAA;AACG;AACA,YAAC,GAAD;AACG,MAAA,MAAM,EAAEN,KAAK,CAACQ,MADjB;AAEG,MAAA,IAAI,EAAE,EAFT;AAGG,MAAA,aAAa,EAAEP,QAHlB;AAIG,MAAA,MAAM,EACHA,QALN;AAAA,8BASG,QAAC,QAAD;AACG,QAAA,IAAI,EAAE,CAACD,KAAK,CAACE,MAAP,EAAeF,KAAK,CAACG,MAArB,CADT;AAEG,QAAA,WAAW,EAAC,SAFf;AAGG,QAAA,aAAa,EAAE,GAHlB;AAIG,QAAA,YAAY,EAAE;AAJjB;AAAA;AAAA;AAAA;AAAA,cATH,eAiBG,QAAC,MAAD;AACG,QAAA,IAAI,EAAE,iBADT;AAEG,QAAA,QAAQ,EAAEH,KAAK,CAACE,MAFnB;AAGG,QAAA,EAAE,EAAE;AAHP;AAAA;AAAA;AAAA;AAAA,cAjBH,eAyBG,QAAC,MAAD;AACG,QAAA,IAAI,EAAE,kBADT;AAEG,QAAA,QAAQ,EAAEF,KAAK,CAACG;AAFnB;AAAA;AAAA;AAAA;AAAA,cAzBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAFH;AAuDD,CArED;;KAAMJ,Y;AAuEN,eAAeD,gBAAgB,CAAC;AAC9BW,EAAAA,MAAM,EAAG,CAAC,cAAD;AADqB,CAAD,CAAhB,CAEZV,YAFY,CAAf,C,CAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React, { Component }  from 'react';\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport './GoogleMapApi.css'\n\n\nconst MapContainer = props => {\n\n\n  //This stores the person current location to be used for initial render\n  let centered = props.coord1\n\n  //Logic to get center of pickoff and drop off point, to enable both points to be displayed on the screen\n  if (props.coord1 && props.coord2) {\n     const latt = (props.coord1.lat + props.coord2.lat) / 2\n     const lngg = (props.coord1.lng + props.coord2.lng) / 2\n\n     centered = { lat: latt, lng: lngg }\n  }\n\n  return (\n     //Map Render function, used the google-maps-react package to help ease workload.\n     <Map\n        google={props.google}\n        zoom={11}\n        initialCenter={centered}\n        center={\n           centered\n        }\n     >\n        {/* Function to display connecting line between pickUp and dropOff */}\n        <Polyline\n           path={[props.coord1, props.coord2]}\n           strokeColor=\"#0000FF\"\n           strokeOpacity={0.8}\n           strokeWeight={2}\n        />\n\n        {/* Function to display marker for user location and also pick up point */}\n        <Marker\n           name={'Pickup Location'}\n           position={props.coord1}\n           id={1}\n\n        />\n\n        {/* Function to display marker for dropoff point when available */}\n        <Marker\n           name={'Dropoff Location'}\n           position={props.coord2}\n        />\n\n        {/* Unfortunately, the InfoWindows meant to display the approprqaite labels didnt function as expected, Sorry I was unable to rectify in stipulated time */}\n\n\n        {/* <InfoWindow\n           position={{lat: 6.4565958, lng: 3.4268872}}\n           visible={true}\n        >\n           <div>\n              Pickup <NavigateNext />\n           </div>\n        </InfoWindow>\n        <InfoWindow\n           position={props.coord2}\n           visible={true}\n        >\n           <div>\n              Dropoff <NavigateNext />\n           </div>\n        </InfoWindow> */}\n\n     </Map >\n  );\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: (['API_KEY_HERE'])\n})(MapContainer)\n\n// export class MapContainer extends Component {\n//     state = {\n//       showingInfoWindow: false,\n//       activeMarker: {}\n//       selectedPlace: {},\n//     };\n\n//     onMarkerClick = (props, marker, e) =>\n//       this.setState({\n//         selectedPlace: props,\n//         activeMarker: marker,\n//         showingInfoWindow: true\n//       });\n\n//     onMapClicked = (props) => {\n//       if (this.state.showingInfoWindow) {\n//         this.setState({\n//           showingInfoWindow: false,\n//           activeMarker: null\n//         })\n//       }\n//     };\n\n\n\n//     render() {\n//       return (\n//         <div className='GoogleMap'>\n//             <Map google={this.props.google}\n//                 onClick={this.onMapClicked}>\n//             <Marker onClick={this.onMarkerClick}\n//                     name={'Current location'} />\n//             </Map>\n//         </div>\n//       )\n//     }\n//   }\n\n// export default GoogleApiWrapper({\n//   apiKey: ('AIzaSyBpfbp2b1e6kzv8_A1yrUGO3eVt20eFSNA')\n// })(MapContainer)\n"]},"metadata":{},"sourceType":"module"}